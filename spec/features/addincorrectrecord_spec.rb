# Generated by Selenium IDE
require 'selenium-webdriver'
require 'json'
# Тест проверяет отображение ошибок модели при создании некорректной записи
describe 'Addincorrectrecord' do
  before(:each) do
    @driver = Selenium::WebDriver.for :firefox
    @vars = {}
  end
  after(:each) do
    @driver.quit
  end
  it 'addincorrectrecord' do
    # Пользователь входит на сайт
    @driver.get('http://localhost:3000/en')
    # Авторизуется как админ
    @driver.find_element(:css, '.btn-outline-light').click
    @driver.find_element(:id, 'email').click
    @driver.find_element(:id, 'email').send_keys('admin@admin.admin')
    @driver.find_element(:id, 'password').click
    @driver.find_element(:id, 'password').send_keys('123123')
    @driver.find_element(:name, 'commit').click
    @driver.find_element(:link_text, 'Home').click
    @driver.find_element(:css, '.btn-success').click
    # Добавлет новую запись
    @driver.find_element(:id, 'record_title').click
    @driver.find_element(:id, 'record_title').send_keys('Моя любимая машина, которую не хочу никому отдавать и показывать, и что я тут делаю')
    @driver.find_element(:id, 'record_description').click
    @driver.find_element(:id, 'record_description').send_keys('Ничего не скажу')
    @driver.find_element(:name, 'commit').click
    # Ловит ошибки модели
    expect(@driver.find_element(:css, '.alert:nth-child(2)').text).to eq('Name is too long (maximum is 30 characters)')
    expect(@driver.find_element(:css, '.alert:nth-child(3)').text).to eq('Photo can\'t be blank')
  end
end
